Index: .classpath
===================================================================
--- .classpath	(revision 3319)
+++ .classpath	(working copy)
@@ -12,5 +12,7 @@
 	<classpathentry combineaccessrules="false" kind="src" path="/Specs"/>
 	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7"/>
 	<classpathentry kind="lib" path="jSMTLIB.jar" sourcepath="C:/cygwin/home/dcok/eprojects/SMTProjects/SMT/src"/>
+	<classpathentry kind="lib" path="otherlibs/jksvm.jar"/>
+	<classpathentry kind="lib" path="otherlibs/rvmrt.jar"/>
 	<classpathentry kind="output" path="bin"/>
 </classpath>
Index: .settings/org.eclipse.jdt.ui.prefs
===================================================================
--- .settings/org.eclipse.jdt.ui.prefs	(revision 3319)
+++ .settings/org.eclipse.jdt.ui.prefs	(working copy)
@@ -1,4 +1,3 @@
-#Wed Jul 22 12:48:52 EDT 2009
 eclipse.preferences.version=1
 formatter_profile=_OpenJML
 formatter_settings_version=11
Index: buildRelease
===================================================================
--- buildRelease	(revision 3319)
+++ buildRelease	(working copy)
@@ -47,6 +47,8 @@
 	rm -f ${TEMPJAR}/jmlruntime.jar
 	cp -r bin-runtime/* temp2
 	cp -r ${ANNOTATIONS}/bin/* temp2
+	cp otherlibs/jksvm.jar temp2
+	cp otherlibs/rvmrt.jar temp2
 	touch temp2/JMLRUNTIME_MARKER
 	## jmlruntime.jar has bin-runtime, the annotations, and the marker file JMLRUNTIME_MARKER
 	(cd temp2; jar -cf ../${TEMPJAR}/jmlruntime.jar . ) 
@@ -71,6 +73,8 @@
 	cp -r ${ROOT}/OpenJML/bin-runtime/* temp
 	cp -r ${ANNOTATIONS}/bin/* temp
 	cp jSMTLIB.jar temp
+	cp otherlibs/jksvm.jar temp
+	cp otherlibs/rvmrt.jar temp
 	mkdir -p temp/specs14 temp/specs15 temp/specs16 temp/specs17; chmod -R u+rwx,a+rx temp
 	cp -r ${SPECS}/java4/* temp/specs14
     ( cd temp; /usr/bin/find specs14 -name '.svn' -exec rm -rf {} + )
Index: openjml-template.properties
===================================================================
--- openjml-template.properties	(revision 3319)
+++ openjml-template.properties	(working copy)
@@ -13,6 +13,6 @@
 ## properties for other provers.  The name by which the prover
 ## is known to OpenJML is the trailing part of the property
 ## name (the portion after 'openjml.prover.').
-openjml.prover.yices=
+openjml.prover.yices=E:\Afstuderen\yices-2.2.0\bin\yices.exe
 openjml.prover.z3=
 openjml.prover.boogie=
Index: runtime/org/jmlspecs/utils/Utils.java
===================================================================
--- runtime/org/jmlspecs/utils/Utils.java	(revision 3319)
+++ runtime/org/jmlspecs/utils/Utils.java	(working copy)
@@ -12,6 +12,9 @@
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.Map;
+
+import org.jikesrvm.cha.Snapshot;
+import org.jikesrvm.scheduler.RVMThread;
 import org.jmlspecs.lang.Real;
 
 
@@ -810,4 +813,35 @@
         System.out.println(msg);
         return true;
     }
+    
+    /** Additions for STROBE */
+    public static int createSnapshot(){
+        if(RVMThread.getCurrentThread().getSnapshotId() != -1){
+            return -1;
+        }
+        int snapshotid = Snapshot.initiateProbe();
+        return snapshotid;
+    }
+    
+    public static void switchToSnapshot(int snapshotid){
+        if(snapshotid == -1){
+            return;
+        }
+        RVMThread.getCurrentThread().switchToSnapshot(snapshotid);        
+    }
+    
+    public static void switchToLive(int snapshotid){
+        if(snapshotid == -1){
+            return;
+        }
+        RVMThread.getCurrentThread().switchToLive();        
+    }
+    
+    public static void destroySnapshot(int snapshotid){
+        if(snapshotid == -1){
+            return;
+        }
+        Snapshot.completeProbe(snapshotid);
+    }
+    
 }
Index: src/org/jmlspecs/openjml/Strings.java
===================================================================
--- src/org/jmlspecs/openjml/Strings.java	(revision 3319)
+++ src/org/jmlspecs/openjml/Strings.java	(working copy)
@@ -229,4 +229,10 @@
     /** Name of a field put into every rac-compiled class, to signal that it is rac-compiled */
     // Must match corresponding string in Utils.
     public final static String racCompiled = "__JML_racCompiled";
+    
+    /** The prefix of names used to record the result of a
+     * conditional expression.
+     */
+    public final static String strobeSnapshot = "_STROBE__snapshot_";
+    
 }
Index: src/org/jmlspecs/openjml/esc/JmlAssertionAdder.java
===================================================================
--- src/org/jmlspecs/openjml/esc/JmlAssertionAdder.java	(revision 3319)
+++ src/org/jmlspecs/openjml/esc/JmlAssertionAdder.java	(working copy)
@@ -77,6 +77,7 @@
 import org.jmlspecs.openjml.Utils.JmlNotImplementedException;
 import org.jmlspecs.openjml.ext.Arithmetic;
 
+import com.sun.mirror.declaration.MethodDeclaration;
 import com.sun.tools.javac.code.*;
 import com.sun.tools.javac.code.Symbol.ClassSymbol;
 import com.sun.tools.javac.code.Symbol.MethodSymbol;
@@ -2743,6 +2744,11 @@
         
         // Construct a condition, to be used later, that the method has not thrown an exception
         DiagnosticPosition methodPos = methodDecl;
+
+        JCVariableDecl preVariable = createAndGoToSnapshot(methodPos, preStats);
+        JCVariableDecl ensuresVariable = createAndGoToSnapshot(methodPos, ensuresStats);
+        JCVariableDecl exsuresVariable = createAndGoToSnapshot(methodPos, exsuresStats);        
+        
         JCExpression noException = treeutils.makeEqObject(methodPos.getPreferredPosition(),
                 treeutils.makeIdent(methodPos.getPreferredPosition(), exceptionSym), treeutils.nullLit);
         
@@ -3188,6 +3194,11 @@
             }
             
         }
+
+        switchBackAndDestroySnapshot(methodPos, preVariable, preStats);
+        switchBackAndDestroySnapshot(methodPos, ensuresVariable, ensuresStats);
+        switchBackAndDestroySnapshot(methodPos, exsuresVariable, exsuresStats);
+
         initialStats.appendList(preStats);
         if (ensuresStats.isEmpty() && exsuresStats.isEmpty()) {
             // skip
@@ -3198,6 +3209,8 @@
         paramActuals = null;
         clearInvariants();
         
+        
+        
         // This empty block with a null label marks the end of the pre-state
         if (esc) {
             addStat(comment(methodDecl,"End of pre-state",null));
@@ -3207,6 +3220,35 @@
         }
     }
     
+    protected JCVariableDecl createAndGoToSnapshot(DiagnosticPosition preferredPosition,
+            ListBuffer<JCStatement> stats) {
+        JCExpression snapshotExpression = methodCallUtilsExpression(preferredPosition,"createSnapshot");
+        
+        Name n = names.fromString(Strings.strobeSnapshot + (++count));
+        JCVariableDecl vd = treeutils.makeVarDef(snapshotExpression.type, n, methodDecl.sym, snapshotExpression);
+        stats.add(vd);
+        
+        JCExpression ex = treeutils.makeIdent(methodDecl.pos,vd.sym);
+        JCStatement switchCall = methodCallUtilsStatement(preferredPosition, "switchToSnapshot", ex);
+        stats.add(switchCall);
+        
+        return vd;
+    }
+    
+    protected void switchBackAndDestroySnapshot(DiagnosticPosition preferredPosition,
+            JCVariableDecl vd, ListBuffer<JCStatement> stats) { 
+        
+        // switch to live        
+        JCExpression ex = treeutils.makeIdent(methodDecl.pos,vd.sym);
+        JCStatement createCall = methodCallUtilsStatement(preferredPosition, "switchToLive", ex);
+        stats.add(createCall);
+        
+        // destroy snapshot
+        ex = treeutils.makeIdent(methodDecl.pos,vd.sym);
+        JCStatement switchCall = methodCallUtilsStatement(preferredPosition, "destroySnapshot", ex); 
+        stats.add(switchCall);
+    }
+
     protected void addInstanceInitialization() {
         JmlSpecs.TypeSpecs tspecs = specs.get(classDecl.sym);
         
@@ -5133,6 +5175,7 @@
             
             ListBuffer<JCStatement> saved = currentStatements;
             oldStatements = currentStatements; // FIXME - why twice
+            JCVariableDecl preconditionSnapshot = createAndGoToSnapshot(that.pos(), currentStatements);
             
             if (!isHelper(calleeMethodSym)) {
                 addStat(comment(that, "Checking caller invariants before calling method " + utils.qualifiedMethodSig(calleeMethodSym),null));
@@ -5488,7 +5531,7 @@
 
             ListBuffer<JCStatement> ensuresStatsOuter = new ListBuffer<JCStatement>();
             ListBuffer<JCStatement> exsuresStatsOuter = new ListBuffer<JCStatement>();
-
+            
             // Now put in the actual method call
             // For esc, the resultSym is used in the postconditions; there is 
             // no actual call of the method. Similarly for new object expressions.
@@ -5522,6 +5565,9 @@
 
             ensuresStatsOuter.add(comment(that,"Assuming callee normal postconditions",null));
             exsuresStatsOuter.add(comment(that,"Assuming callee exceptional postconditions",null));
+            
+            JCVariableDecl normalPoststateSnapshot = createAndGoToSnapshot(that.pos(), ensuresStatsOuter);
+            JCVariableDecl exceptionalPoststateSnapshot = createAndGoToSnapshot(that.pos(), exsuresStatsOuter);
 
             if (doTranslations) {
 
@@ -5962,6 +6008,8 @@
             
             currentStatements = saved;
             
+            switchBackAndDestroySnapshot(that.pos(), preconditionSnapshot, currentStatements);
+            
             if (exceptionDeclCall != null) {
                 exsuresStatsOuter.add(M.at(that).Throw(treeutils.makeIdent(that.pos, exceptionDeclCall.sym)));
             } else if (rac) {
@@ -5968,6 +6016,9 @@
                 System.out.println("DID NOT EXPECT THIS"); // FIXME
             }
             
+            switchBackAndDestroySnapshot(that.pos(), normalPoststateSnapshot, ensuresStatsOuter);
+            switchBackAndDestroySnapshot(that.pos(), exceptionalPoststateSnapshot, exsuresStatsOuter);
+
             JCBlock ensuresBlock = M.at(that).Block(0, ensuresStatsOuter.toList());
             if (rac) {
                 JCBlock exsuresBlock = M.at(that).Block(0, exsuresStatsOuter.toList());
